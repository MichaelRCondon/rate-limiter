version: '3.8'
services:
  rate-limiter:
    build:
      context: ..  # Points to parent directory where rate-limiter code is
      dockerfile: Dockerfile
    container_name: rate-limiter
    restart: unless-stopped
    ports:
      - "8080:8080"  # Rate limiter on port 8080
    environment:
      - redis_url=redis:6379
      - redis_username=
      - redis_password=${redis_password}
      - db=0
      - backend_url=http://hello-api:8080
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - rate-limiter-network
    depends_on:
      redis:
        condition: service_healthy
      hello-api:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    container_name: rate-limiter-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - redis_password=${redis_password}
    command: redis-server --appendonly yes --appendfsync everysec --requirepass ${redis_password}
    volumes:
      # Persist Redis data
      - redis_data:/data
      # Optional: Custom Redis config
      # - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - rate-limiter-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  hello-api:
    build:
      context: ../DemoAPI  # Path to your Go API directory
      dockerfile: Dockerfile
    container_name: hello-api
    restart: unless-stopped
    ports:
      - "9080:8080"  # Expose for direct testing (optional)
    networks:
      - rate-limiter-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/hello"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # JWT Token Generator Service
  jwt-signer:
    build:
      context: ../tools/jwt-signer
      dockerfile: Dockerfile
    container_name: jwt-signer
    environment:
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - rate-limiter-network
    profiles:
      - tools
    # This service is meant to be run on-demand via docker-compose run
    command: ["-list"]

  # Optional: Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - redis_password=${redis_password}
    networks:
      - rate-limiter-network
    depends_on:
      redis:
        condition: service_healthy

volumes:
  redis_data:
    driver: local

networks:
  rate-limiter-network:
    driver: bridge